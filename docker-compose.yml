# Docker Compose for LAION Embeddings v2.2.0
# Production-ready deployment with all MCP tools functional

version: '3.8'

services:
  laion-embeddings:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laion-embeddings-mcp-server
    ports:
      - "9999:9999"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - VECTOR_STORE=faiss
      - MCP_TOOLS_ENABLED=true
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "mcp_server.py", "--validate"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    networks:
      - laion-network

  # Optional: IPFS node for IPFS vector store
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: laion-ipfs-node
    ports:
      - "4001:4001"     # P2P port
      - "5001:5001"     # API port
      - "8080:8080"     # Gateway port
    volumes:
      - ipfs-data:/data/ipfs
      - ipfs-staging:/export
    environment:
      - IPFS_PROFILE=server
    restart: unless-stopped
    networks:
      - laion-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: laion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - laion-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: laion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - laion-network

volumes:
  ipfs-data:
  ipfs-staging:
  prometheus-data:
  grafana-data:

networks:
  laion-network:
    driver: bridge
