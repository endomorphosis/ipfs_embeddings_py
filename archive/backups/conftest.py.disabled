"""
Pytest configuration file for test suite.

This file sets up the test environment and provides fixtures for the tests.
"""

import pytest
import os
from fastapi.testclient import TestClient
from main import app # Assuming your FastAPI app instance is named 'app' in main.py

def pytest_configure(config):
    """Configure pytest with custom markers."""
    config.addinivalue_line("markers", "performance: mark test as a performance test")
    config.addinivalue_line("markers", "integration: mark test as an integration test")
    config.addinivalue_line("markers", "slow: mark test as a slow test")

@pytest.fixture(scope="session", autouse=True)
def setup_testing_environment():
    """Set up the testing environment."""
    # Set up test environment lazily to avoid import issues
    try:
        from test.mocks import setup_test_environment
        setup_test_environment()
    except ImportError as e:
        print(f"Warning: Could not import test mocks: {e}")
    
    # Ensure TESTING environment variable is set
    os.environ["TESTING"] = "true"
    yield
    # Clean up after all tests
    if "TEST_MISSING_IPFS" in os.environ:
        del os.environ["TEST_MISSING_IPFS"]

@pytest.fixture(scope="module")
def client():
    """Provides a test client for the FastAPI application."""
    with TestClient(app) as c:
        yield c

@pytest.fixture(scope="module")
def auth_headers():
    """Provides authentication headers for testing authenticated endpoints."""
    from auth import authenticate_user, create_access_token
    # Authenticate a test admin user and create a token
    admin_user = authenticate_user("admin", "admin123")
    if admin_user:
        access_token = create_access_token(
            data={"sub": admin_user["username"], "role": admin_user["role"]}
        )
        return {"Authorization": f"Bearer {access_token}"}
    return {} # Return empty if authentication fails (shouldn't happen in test setup)

@pytest.fixture
def sample_search_request():
    """Provides a sample valid search request payload."""
    return {
        "collection": "test_collection",
        "text": "test query",
        "n": 5
    }

@pytest.fixture
def sample_invalid_request():
    """Provides a sample invalid request payload for validation testing."""
    return {
        "collection": "",  # Invalid empty collection
        "text": "",  # Invalid empty text
        "n": 0  # Invalid n value
    }

@pytest.fixture
def sample_create_embeddings_request():
    """Provides a sample valid create embeddings request payload."""
    return {
        "dataset": "test/dataset",
        "split": "train",
        "column": "text",
        "dst_path": "/tmp/test_embeddings",
        "models": ["thenlper/gte-small"]
    }
