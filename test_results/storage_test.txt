============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /home/barberb/laion-embeddings-1
configfile: pytest.ini
plugins: anyio-4.9.0, timeout-2.3.1, asyncio-0.20.3
asyncio: mode=Mode.STRICT
collecting ... collected 7 items

test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_storage_initialization PASSED [ 14%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_store_vector_shard PASSED [ 28%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_retrieve_vector_shard PASSED [ 42%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_store_index_manifest PASSED [ 57%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_retrieve_index_manifest PASSED [ 71%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_connection_failure PASSED [ 85%]
test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_missing_ipfs_client PASSED [100%]

=============================== warnings summary ===============================
test/test_ipfs_vector_service.py:370
  /home/barberb/laion-embeddings-1/test/test_ipfs_vector_service.py:370: PytestUnknownMarkWarning: Unknown pytest.mark.performance - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.performance

test/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_storage_initialization
  /home/barberb/.local/lib/python3.12/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 7 passed, 2 warnings in 0.41s =========================
IPFSVectorStorage exit code: 0
