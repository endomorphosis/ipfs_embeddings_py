{
  "timestamp": "2025-06-03T03:23:28.305711",
  "duration_seconds": 35.667255,
  "overall_status": "SUCCESS",
  "summary": {
    "total_tests": 7,
    "passed_tests": 7,
    "critical_tests": 6,
    "critical_passed": 6
  },
  "test_results": {
    "Standalone Integration Tests": {
      "result": {
        "success": true,
        "stdout": "Starting integration tests...\n\n\n==================================================\nTesting basic vector service...\nAdding embeddings...\nAdd result: {'status': 'success', 'added_count': 50, 'total_vectors': 50}\nTesting search...\nSearch result: {'status': 'success', 'results': [{'index': 14, 'distance': 54.38917541503906, 'similarity_score': np.float32(0.01805407), 'id': 'vec_14', 'text': 'Sample text 14', 'metadata': {'id': 'doc_14', 'source': 'test'}}, {'index': 25, 'distance': 55.87206268310547, 'similarity_score': np.float32(0.017583326), 'id': 'vec_25', 'text': 'Sample text 25', 'metadata': {'id': 'doc_25', 'source': 'test'}}, {'index': 23, 'distance': 57.45930099487305, 'similarity_score': np.float32(0.017105918), 'id': 'vec_23', 'text': 'Sample text 23', 'metadata': {'id': 'doc_23', 'source': 'test'}}, {'index': 19, 'distance': 57.49851989746094, 'similarity_score': np.float32(0.01709445), 'id': 'vec_19', 'text': 'Sample text 19', 'metadata': {'id': 'doc_19', 'source': 'test'}}, {'index': 38, 'distance': 58.953346252441406, 'similarity_score': np.float32(0.016679635), 'id': 'vec_38', 'text': 'Sample text 38', 'metadata': {'id': 'doc_38', 'source': 'test'}}], 'query_time_ms': 0}\n\u2713 Vector service test passed!\n==================================================\n\n==================================================\nTesting IPFS vector service...\nAdding embeddings to IPFS service...\nAdd result: {'status': 'success', 'local': {'status': 'success', 'added_count': 30, 'total_vectors': 30}, 'distributed': {'status': 'success', 'added_count': 30, 'shard_ids': ['shard_ef96e32c', 'shard_7ba20f56'], 'shard_cids': ['QmTestHash123', 'QmTestHash123'], 'total_vectors': 30, 'shard_count': 2, 'manifest_hash': 'QmTestHash123'}}\nTesting search...\nSearch result: {'status': 'success', 'results': {'local': {'status': 'success', 'results': [{'index': 18, 'distance': 62.17408752441406, 'similarity_score': np.float32(0.015829274), 'id': 'vec_18', 'text': 'Sample text 18', 'metadata': {'id': 'doc_18', 'source': 'test', 'text': 'Sample text 18'}}, {'index': 6, 'distance': 62.58126449584961, 'similarity_score': np.float32(0.015727904), 'id': 'vec_6', 'text': 'Sample text 6', 'metadata': {'id': 'doc_6', 'source': 'test', 'text': 'Sample text 6'}}, {'index': 8, 'distance': 62.676109313964844, 'similarity_score': np.float32(0.015704477), 'id': 'vec_8', 'text': 'Sample text 8', 'metadata': {'id': 'doc_8', 'source': 'test', 'text': 'Sample text 8'}}, {'index': 22, 'distance': 62.96046447753906, 'similarity_score': np.float32(0.015634658), 'id': 'vec_22', 'text': 'Sample text 22', 'metadata': {'id': 'doc_22', 'source': 'test', 'text': 'Sample text 22'}}, {'index': 28, 'distance': 63.448707580566406, 'similarity_score': np.float32(0.015516215), 'id': 'vec_28', 'text': 'Sample text 28', 'metadata': {'id': 'doc_28', 'source': 'test', 'text': 'Sample text 28'}}], 'query_time_ms': 0}}}\n\u2713 IPFS vector service test passed!\n==================================================\n\n==================================================\nTesting clustering service...\nAdding vectors with clustering...\nAdd result: {'status': 'success', 'total_added': 30, 'shards_used': ['cluster_2_shard', 'cluster_1_shard', 'cluster_0_shard'], 'clustering_quality': {'silhouette_score': 0.0076288082636892796, 'calinski_harabasz_score': 1.2368385791778564, 'n_clusters': 3, 'n_noise': 0}, 'clusters_info': {np.int32(0): {'size': 3, 'quality_score': np.float32(0.1831885)}, np.int32(1): {'size': 15, 'quality_score': np.float32(0.15579808)}, np.int32(2): {'size': 12, 'quality_score': np.float32(0.15862617)}}}\nTesting search with cluster routing...\nSearch result: {'status': 'success', 'results': [{'index': 5, 'distance': 62.17408752441406, 'similarity_score': np.float32(0.015829274), 'id': 'vec_5', 'text': 'Sample text 18', 'metadata': {'id': 'doc_18', 'source': 'test'}, 'shard_id': 'cluster_2_shard', 'cluster_id': np.int32(2)}, {'index': 2, 'distance': 62.58126449584961, 'similarity_score': np.float32(0.015727904), 'id': 'vec_2', 'text': 'Sample text 6', 'metadata': {'id': 'doc_6', 'source': 'test'}, 'shard_id': 'cluster_1_shard', 'cluster_id': np.int32(1)}, {'index': 3, 'distance': 62.676109313964844, 'similarity_score': np.float32(0.015704477), 'id': 'vec_3', 'text': 'Sample text 8', 'metadata': {'id': 'doc_8', 'source': 'test'}, 'shard_id': 'cluster_1_shard', 'cluster_id': np.int32(1)}, {'index': 8, 'distance': 62.96046447753906, 'similarity_score': np.float32(0.015634658), 'id': 'vec_8', 'text': 'Sample text 22', 'metadata': {'id': 'doc_22', 'source': 'test'}, 'shard_id': 'cluster_2_shard', 'cluster_id': np.int32(2)}, {'index': 11, 'distance': 63.448707580566406, 'similarity_score': np.float32(0.015516215), 'id': 'vec_11', 'text': 'Sample text 28', 'metadata': {'id': 'doc_28', 'source': 'test'}, 'shard_id': 'cluster_2_shard', 'cluster_id': np.int32(2)}], 'shards_searched': ['cluster_2_shard', 'cluster_1_shard', 'cluster_0_shard'], 'total_candidates': 13, 'search_strategy': 'adaptive'}\n\u2713 Clustering service test passed!\n==================================================\n\n\nTest Results:\nPassed: 3/3\n\ud83c\udf89 All integration tests passed!\n",
        "stderr": "Failed to connect to IPFS: ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=5001): Max retries exceeded with url: /api/v0/version?stream-channels=true (Caused by NewConnectionError('<ipfshttpclient.requests_wrapper.HTTPConnection object at 0x7e5251b9a000>: Failed to establish a new connection: [Errno 111] Connection refused'))\nIPFS connection failed in test mode: ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=5001): Max retries exceeded with url: /api/v0/version?stream-channels=true (Caused by NewConnectionError('<ipfshttpclient.requests_wrapper.HTTPConnection object at 0x7e5251b9a000>: Failed to establish a new connection: [Errno 111] Connection refused')), using mock client\n",
        "returncode": 0
      },
      "critical": true,
      "command": "python test_integration_standalone.py"
    },
    "Vector Service Unit Tests": {
      "result": {
        "success": true,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python\ncachedir: .pytest_cache\nrootdir: /home/barberb/laion-embeddings-1\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, timeout-2.3.1, asyncio-0.20.3\nasyncio: mode=Mode.STRICT\ncollecting ... collected 23 items\n\ntest/test_vector_service.py::TestVectorConfig::test_vector_config_defaults PASSED [  4%]\ntest/test_vector_service.py::TestVectorConfig::test_vector_config_custom PASSED [  8%]\ntest/test_vector_service.py::TestVectorConfig::test_vector_config_testing_mode PASSED [ 13%]\ntest/test_vector_service.py::TestFAISSIndex::test_faiss_index_initialization PASSED [ 17%]\ntest/test_vector_service.py::TestFAISSIndex::test_flat_index_creation PASSED [ 21%]\ntest/test_vector_service.py::TestFAISSIndex::test_ivf_index_creation PASSED [ 26%]\ntest/test_vector_service.py::TestFAISSIndex::test_add_vectors_flat PASSED [ 30%]\ntest/test_vector_service.py::TestFAISSIndex::test_search_vectors PASSED  [ 34%]\ntest/test_vector_service.py::TestFAISSIndex::test_train_ivf_index PASSED [ 39%]\ntest/test_vector_service.py::TestFAISSIndex::test_save_and_load_index PASSED [ 43%]\ntest/test_vector_service.py::TestFAISSIndex::test_normalize_vectors PASSED [ 47%]\ntest/test_vector_service.py::TestVectorService::test_vector_service_initialization PASSED [ 52%]\ntest/test_vector_service.py::TestVectorService::test_add_vectors_with_metadata PASSED [ 56%]\ntest/test_vector_service.py::TestVectorService::test_search_vectors_with_metadata PASSED [ 60%]\ntest/test_vector_service.py::TestVectorService::test_get_vector_by_id PASSED [ 65%]\ntest/test_vector_service.py::TestVectorService::test_get_index_stats PASSED [ 69%]\ntest/test_vector_service.py::TestVectorService::test_save_and_load_service PASSED [ 73%]\ntest/test_vector_service.py::TestVectorService::test_clear_index PASSED  [ 78%]\ntest/test_vector_service.py::TestVectorService::test_error_handling_mismatched_vectors_metadata PASSED [ 82%]\ntest/test_vector_service.py::TestVectorService::test_error_handling_invalid_dimension PASSED [ 86%]\ntest/test_vector_service.py::TestVectorServiceAsync::test_async_search PASSED [ 91%]\ntest/test_vector_service.py::TestVectorServiceIntegration::test_large_dataset_handling PASSED [ 95%]\ntest/test_vector_service.py::TestVectorServiceIntegration::test_different_index_types PASSED [100%]\n\n=============================== warnings summary ===============================\n../.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441\n  /home/barberb/.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: asyncio_default_fixture_loop_scope\n  \n    self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\ntest/test_vector_service.py::TestVectorConfig::test_vector_config_defaults\n  /home/barberb/.local/lib/python3.12/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.\n    from numpy.core._multiarray_umath import __cpu_features__\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 23 passed, 2 warnings in 0.93s ========================\n",
        "stderr": "",
        "returncode": 0
      },
      "critical": true,
      "command": "python -m pytest test/test_vector_service.py -v --tb=short"
    },
    "IPFS Vector Service Unit Tests": {
      "result": {
        "success": true,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python\ncachedir: .pytest_cache\nrootdir: /home/barberb/laion-embeddings-1\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, timeout-2.3.1, asyncio-0.20.3\nasyncio: mode=Mode.STRICT\ncollecting ... collected 15 items\n\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_storage_initialization PASSED [  6%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_store_vector_shard PASSED [ 13%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_retrieve_vector_shard PASSED [ 20%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_store_index_manifest PASSED [ 26%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_retrieve_index_manifest PASSED [ 33%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_connection_failure PASSED [ 40%]\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_missing_ipfs_client PASSED [ 46%]\ntest/test_ipfs_vector_service.py::TestDistributedVectorIndex::test_add_vectors_distributed PASSED [ 53%]\ntest/test_ipfs_vector_service.py::TestDistributedVectorIndex::test_search_distributed PASSED [ 60%]\ntest/test_ipfs_vector_service.py::TestDistributedVectorIndex::test_load_from_manifest PASSED [ 66%]\ntest/test_ipfs_vector_service.py::TestDistributedVectorIndex::test_shard_creation PASSED [ 73%]\ntest/test_ipfs_vector_service.py::TestDistributedVectorIndex::test_error_handling_in_search PASSED [ 80%]\ntest/test_ipfs_vector_service.py::TestIPFSIntegration::test_round_trip_vector_storage PASSED [ 86%]\ntest/test_ipfs_vector_service.py::TestIPFSIntegration::test_manifest_consistency PASSED [ 93%]\ntest/test_ipfs_vector_service.py::TestIPFSPerformance::test_large_shard_storage PASSED [100%]\n\n=============================== warnings summary ===============================\n../.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441\n  /home/barberb/.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: asyncio_default_fixture_loop_scope\n  \n    self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\ntest/test_ipfs_vector_service.py::TestIPFSVectorStorage::test_ipfs_storage_initialization\n  /home/barberb/.local/lib/python3.12/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.\n    from numpy.core._multiarray_umath import __cpu_features__\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 15 passed, 2 warnings in 1.04s ========================\n",
        "stderr": "",
        "returncode": 0
      },
      "critical": true,
      "command": "python -m pytest test/test_ipfs_vector_service.py -v --tb=short"
    },
    "Clustering Service Unit Tests": {
      "result": {
        "success": true,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python\ncachedir: .pytest_cache\nrootdir: /home/barberb/laion-embeddings-1\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, timeout-2.3.1, asyncio-0.20.3\nasyncio: mode=Mode.STRICT\ncollecting ... collected 19 items\n\ntest/test_clustering_service.py::TestClusterConfig::test_cluster_config_defaults PASSED [  5%]\ntest/test_clustering_service.py::TestClusterConfig::test_cluster_config_custom PASSED [ 10%]\ntest/test_clustering_service.py::TestVectorClusterer::test_clusterer_initialization PASSED [ 15%]\ntest/test_clustering_service.py::TestVectorClusterer::test_kmeans_clustering PASSED [ 21%]\ntest/test_clustering_service.py::TestVectorClusterer::test_hierarchical_clustering PASSED [ 26%]\ntest/test_clustering_service.py::TestVectorClusterer::test_predict_cluster PASSED [ 31%]\ntest/test_clustering_service.py::TestVectorClusterer::test_predict_before_fit_error PASSED [ 36%]\ntest/test_clustering_service.py::TestVectorClusterer::test_get_cluster_stats PASSED [ 42%]\ntest/test_clustering_service.py::TestVectorClusterer::test_sklearn_import_error PASSED [ 47%]\ntest/test_clustering_service.py::TestSmartShardingService::test_create_clustered_shards PASSED [ 52%]\ntest/test_clustering_service.py::TestSmartShardingService::test_search_clustered_shards PASSED [ 57%]\ntest/test_clustering_service.py::TestSmartShardingService::test_search_with_limited_clusters PASSED [ 63%]\ntest/test_clustering_service.py::TestSmartShardingService::test_search_without_clustering_info PASSED [ 68%]\ntest/test_clustering_service.py::TestSmartShardingService::test_error_handling_in_clustered_search PASSED [ 73%]\ntest/test_clustering_service.py::TestClusteringIntegration::test_end_to_end_clustering_workflow PASSED [ 78%]\ntest/test_clustering_service.py::TestClusteringIntegration::test_cluster_quality_metrics PASSED [ 84%]\ntest/test_clustering_service.py::TestClusteringIntegration::test_adaptive_cluster_search PASSED [ 89%]\ntest/test_clustering_service.py::TestClusteringPerformance::test_large_dataset_clustering PASSED [ 94%]\ntest/test_clustering_service.py::TestClusteringPerformance::test_concurrent_shard_operations PASSED [100%]\n\n=============================== warnings summary ===============================\n../.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441\n  /home/barberb/.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: asyncio_default_fixture_loop_scope\n  \n    self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\ntest/test_clustering_service.py::TestClusterConfig::test_cluster_config_defaults\n  /home/barberb/.local/lib/python3.12/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.\n    from numpy.core._multiarray_umath import __cpu_features__\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 19 passed, 2 warnings in 7.63s ========================\n",
        "stderr": "",
        "returncode": 0
      },
      "critical": true,
      "command": "python -m pytest test/test_clustering_service.py -v --tb=short"
    },
    "Vector Service Integration Tests": {
      "result": {
        "success": true,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0 -- /usr/bin/python\ncachedir: .pytest_cache\nrootdir: /home/barberb/laion-embeddings-1\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, timeout-2.3.1, asyncio-0.20.3\nasyncio: mode=Mode.STRICT\ncollecting ... collected 2 items\n\ntest/test_complete_integration.py::TestVectorServiceIntegration::test_vector_service_complete_workflow PASSED [ 50%]\ntest/test_complete_integration.py::TestVectorServiceIntegration::test_different_index_types PASSED [100%]\n\n=============================== warnings summary ===============================\n../.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441\n  /home/barberb/.local/lib/python3.12/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: asyncio_default_fixture_loop_scope\n  \n    self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\ntest/test_complete_integration.py::TestVectorServiceIntegration::test_vector_service_complete_workflow\n  /home/barberb/.local/lib/python3.12/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.\n    from numpy.core._multiarray_umath import __cpu_features__\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 2 warnings in 7.02s =========================\n",
        "stderr": "",
        "returncode": 0
      },
      "critical": true,
      "command": "python -m pytest test/test_complete_integration.py::TestVectorServiceIntegration -v"
    },
    "Basic Import Tests": {
      "result": {
        "success": true,
        "stdout": "",
        "stderr": "",
        "returncode": 0
      },
      "critical": false,
      "command": "python test_imports.py"
    },
    "Service Dependencies Check": {
      "result": {
        "success": true,
        "stdout": "All services import OK\n",
        "stderr": "",
        "returncode": 0
      },
      "critical": true,
      "command": "python -c \"from services.vector_service import VectorService; from services.clustering_service import SmartShardingService; print(\\\"All services import OK\\\")\""
    }
  }
}